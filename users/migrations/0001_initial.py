# Generated by Django 3.2.18 on 2023-06-06 14:08

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import hashid_field.field
import users.managers
import utilities.functions
import vies.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('permissions', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=16, prefix='user_', primary_key=True, serialize=False)),
                ('picture', models.ImageField(blank=True, null=True, upload_to=utilities.functions.upload_avatar_to, verbose_name='profile picture')),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Administrator'), (1, 'Worker'), (2, 'Customer')], default=2, verbose_name='Role')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('orion_groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='permissions.Group', verbose_name='orion groups')),
                ('user_orion_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='permissions.Permission', verbose_name='orion user permissions')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': [('can_active', 'can_active')],
            },
            managers=[
                ('objects', users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=16, prefix='address_', primary_key=True, serialize=False)),
                ('streetAddress', models.CharField(blank=True, max_length=50, verbose_name='Street Address')),
                ('postalCode', models.CharField(blank=True, max_length=15, verbose_name='Postal Code')),
                ('addressLocality', models.CharField(blank=True, max_length=25, verbose_name='Address Locality')),
                ('addressRegion', models.CharField(blank=True, max_length=25, verbose_name='Address Region')),
                ('addressCountry', models.CharField(blank=True, max_length=2, verbose_name='Address Country')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='OrganizationProfile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=16, prefix='organization_', primary_key=True, serialize=False)),
                ('vat', vies.models.VATINField(blank=True, max_length=14, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organization', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='WorkerProfile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=16, prefix='worker_', primary_key=True, serialize=False)),
                ('performanceRole', models.PositiveSmallIntegerField(choices=[(0, 'CNC operator'), (1, 'Nesting operator'), (2, 'Manual cutting operator'), (3, 'Assembly operator'), (4, 'Manager'), (5, 'Officer operator'), (6, 'Warehouse operator'), (7, 'Other')], verbose_name='Performance Role')),
                ('hasOrganization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workers', to='users.organizationprofile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='worker', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Worker',
                'verbose_name_plural': 'Worker',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=16, prefix='customer_', primary_key=True, serialize=False)),
                ('vat', vies.models.VATINField(blank=True, max_length=14, null=True, unique=True)),
                ('tos', models.BooleanField(default=False, verbose_name='Terms of Service')),
                ('isCompany', models.BooleanField(default=False, verbose_name='is a Institution?')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='users.address')),
                ('delivery_address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='delivery_addresses', to='users.address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customer',
                'ordering': ('-created',),
            },
        ),
    ]
